[["index.html", "Visium Data Preprocessing Welcome", " Visium Data Preprocessing 2023-09-11 Welcome This is the website for the ‘Visium Data Preprocessing’ online book. This book provides detailed instructions on several data preprocessing procedures for computational analyses of spatial transcriptomics data from the 10x Genomics Visium platform. The book is organized into chapters for each data preprocessing step. "],["introduction.html", "Chapter 1 Introduction 1.1 Spatially-resolved transcriptomics 1.2 10x Genomics Visium", " Chapter 1 Introduction This book provides details on several key data preprocessing procedures for computational analyses of spatially-resolved transcriptomics data from the 10x Genomics Visium platform. 1.1 Spatially-resolved transcriptomics Spatially-resolved transcriptomics (SRT) refers to high-throughput genomic technologies that enable the measurement of large sets of genes at a large number of spatial locations (e.g. up to thousands of genes at thousands of measurement locations), usually on two-dimensional tissue sections. A number of technological platforms have been developed, each with their unique advantages. SRT was named the Method of the Year 2020 by Nature Methods, and has found widespread application in numerous biological systems. A number of different technological platforms are now available. These can be grouped into sequencing-based platforms and molecule-based (or imaging-based) platforms. For recent reviews of available platforms, computational analysis methods, and outstanding challenges, see Bressan et al. 2023 or Moses et al. 2022. In this book, we focus on the 10x Genomics Visium platform, which is an example of a sequencing-based platform and is currently the most widely-used platform. Each platform brings specific challenges regarding computational analyses, including data preprocessing procedures as well as downstream analyses. In this book, we provide detailed instructions on data preprocessing procedures for data from the 10x Genomics Visium platform. Figure 1.1: Illustration of potential uses of spatially-resolved transcriptomics data and how it can be combined with single cell/nucleus RNA-seq to study tissues of interest such as the human brain. Source: Maynard et al, Neuropsychopharmacol., 2020. 1.2 10x Genomics Visium The 10x Genomics Visium platform measures transcriptome-wide gene expression at a grid of spatial locations (referred to as spots) on a tissue capture area. Either fresh-frozen or formalin-fixed paraffin-embedded (FFPE) tissue may be used. Each spot contains millions of spatially-barcoded capture oligonucleotides, which bind to mRNAs from the tissue. A cDNA library is then generated for sequencing, which includes the spatial barcodes, allowing reads to be mapped back to their spatial locations. The array dimensions are 6.5mm x 6.5mm, with around 5000 barcoded spots. Spots are 55µm in diameter and spaced 100µm center-to-center in a hexagonal grid arrangement. The number of cells per spot depends on the tissue cell density, e.g. around 0-10 for human brain or ~50 for mouse brain. Each Visium slide contains four tissue capture areas. The following figure provides an illustration. Histology images generated from hematoxylin and eosin (H&amp;E) staining can be used to identify anatomical and cell morphological features such as the number of cells per spot. Figure 1.2: Schematic of 10x Genomics Visium platform. Source: 10x Genomics Visium website "],["visium-data-preprocessing.html", "Chapter 2 Visium data preprocessing", " Chapter 2 Visium data preprocessing In this part, we describe several detailed data preprocessing steps for 10x Genomics Visium data, which are required to prepare raw data files to load the data into R. In the examples shown here, we use the Space Ranger and Loupe Browser software provided by 10x Genomics to preprocess Visium data. Alternative preprocessing workflows have also been developed by others, including the alevin-fry pipeline for Visium and other platforms. Figure 2.1: An overview of the Visium technology by 10x Genomics for generating spatially-resolved transcriptomics data. Each Visium slide has four tissue capture areas. Each of these capture areas has around 5000 barcoded spots. The tissue capture areas are delineated by a fiducial frame that is useful for aligning the images and determining the location of the spots in order to map the gene expression data with the imaging data. Source: VistoSeg. "],["image-segmentation-visium.html", "Chapter 3 Image segmentation (Visium) 3.1 Overview 3.2 What is VistoSeg? 3.3 Split histology images 3.4 Segment cell nuclei 3.5 Identify number of cells per spot 3.6 Wrapping up", " Chapter 3 Image segmentation (Visium) 3.1 Overview As we saw in the introduction on Spatially-resolved transcriptomics, the Visium platform from 10x Genomics has four tissue capture areas. Figure 3.1: Visium slide design. Source: 10x Genomics. While 10x Genomics will provide the Visium slide, you can use many different imaging scopes to obtain bright field and/or fluorescent images for regular Visium or Visium immunofluorescence (IF), respectively. Figure 3.2: Visium images you might generate using your preferred imaging scope: bright field images showing the tissue or multi-channel fluorescent images. Source: 10x Genomics. As we will learn in the next chapters, we will want to use Loupe Browser (Visium) to manually align each tissue capture area prior to running Space Ranger (Visium) for processing the gene expression data. Figure 3.3: A single Visium tissue capture area with the fiducial frame aligned through Loupe such that the red circles overlap the fiducial frame as determined by visual inspection. Source: 10x Genomics. You likely will image a full Visium slide with four tissue capture areas. So before you can proceed, you will need to use some external software to split your image into individual capture areas. One such utility is VistoSeg, which we will illustrate in this chapter. 3.2 What is VistoSeg? VistoSeg is a MATLAB pipeline used to process, analyze, and interactively visualize the high-resolution histology images from the 10x Genomics Visium experiment (Tippani et al. 2021). One of the outputs from VistoSeg is the estimated number of cells per spot, which can be used as an input in downstream analyses. VistoSeg can also be used prior to running Loupe as it can help create high resolution images for each Visium capture area. The main steps in VistoSeg are as follows: Split Image: This step is used to split the large Visium histology whole slide image into individual capture areas, creating four individual .tif files. These images can then be used with Loupe Browser (Visium). Nuclei Segmentation: This is a two-step process where nuclei segmentation is performed for images. Nuclei segmentation is followed by a refining step to get a cleaner image of the nuclei segmentation. Space Ranger: Next, you need to run spaceranger count, described in the Space Ranger (Visium) chapter, to create the input files for the final VistoSeg step. Count Cells/Nuclei: This step is performed to get the count of cells/nuclei per Visium spot for each capture area. Figure 3.4: VistoSeg pipeline overview. Source: VistoSeg. For more information about VistoSeg please see its documentation website. 3.3 Split histology images VistoSeg provides a MATLAB function called splitSlide that can take an image with four capture areas and divide this into four images with approximately the same dimensions (they can be a few pixels off in the x-axis). Sometimes the center of the image is not the center of the slide, in which case the offset can be adjusted manually. Figure 3.5: An example bright field image with four Visium tissue capture areas. Source: VistoSeg. Example images for trying out splitSplide and the corresponding code are available from the VistoSeg documentation website. 3.3.1 File size issues As noted on the VistoSeg software requirements page, high-quality images for a full Visium slide can be as large as ~25 GB each. This means that you will need plenty of memory in order to load the full Visium slide image into MATLAB before you can run splitSlide. This could be two or three times the amount of the image size on disk. Once you have run splitSlide, the rest of the VistoSeg pipeline can run on a machine with 16 GB of RAM (or even less). 3.4 Segment cell nuclei Once you have run the splitSlide function from VistoSeg, you can now proceed to segment the images. This process helps remove background noise in the images so you can more readily identify the cells or nuclei in your bright field image. For fluorescent images, dotdotdot’s utilities (Kristen R. Maynard et al. 2020) could potentially be useful, particularly if your images have Z-stacks. Figure 3.6: dotdotdot overview figure. Notice the Z-stacked images which some scopes produce. Source: dotdotdot. VistoSeg provides two functions: VNS (Visium Nuclei Segmentation) and refineVNS which are used to perform the cell/nuclei segmentation on regular bright field images. This process involves choosing the total number of visually distinguishable colors in the image (5 in our sample image) and running MATLAB’s color-based segmentation using k-means clustering. Figure 3.7: Color cluster 3 is the one that best corresponds to the nuclei for an example capture area image shown in the VistoSeg documentation. Pixels corresponding to this cluster are shown in gray and the remaining background pixels in green. Source: VistoSeg. For more information and a detailed example check the VistoSeg documentation website. 3.5 Identify number of cells per spot VistoSeg has two utilities for estimating the number of cells per spot. As noted above, for this step you first need to also run Loupe Browser (Visium) and Space Ranger (Visium) to generate the Space Ranger output files, which are required here as an input. The alignment of the individual tissue capture areas with Loupe Browser is required to identify the centers of each of the Visium spots and their coordinates in the images. As long as all downstream segmented images use the exact same proportions as the input image for Loupe Browser, we can compute a scaling factor and use it for computing the coordinates of the Visium spots in the new images. Space Ranger will then provide us the spot coordinate file as well as process the gene expression data. The spot coordinate files will enable us to estimate the number of cells per spot with VistoSeg, as shown in the Space Ranger (Visium) chapter. 3.6 Wrapping up In this chapter we learned about image processing steps required to work with the images we generate as part of our Visium experiments. Given the broad spectrum of imaging scopes, these tools are not available directly within the software provided by 10x Genomics. VistoSeg can help us split our images and process them so that we can estimate the number of cells or nuclei per Visium spot, which we can then use as an input during downstream analyses. References "],["loupe-browser-visium.html", "Chapter 4 Loupe Browser (Visium) 4.1 Overview 4.2 Manual alignment of images 4.3 Output files and Space Ranger 4.4 Downstream analyses in Loupe Browser 4.5 Wrapping up", " Chapter 4 Loupe Browser (Visium) 4.1 Overview Loupe Browser is a desktop application from 10x Genomics that allows you to visualize your gene expression data without having to write code. You can utilize this software for most types of single cell transcriptomic data generated from 10x protocols, however we will discuss specifically how to use it for data generated from the Visium Spatial Gene Expression protocol. In general, you can use the Loupe Browser to align gene expression spots to histology images, look for marker gene expression, annotate populations, and cluster with three different clustering methods. Here is a tutorial from 10x Genomics on how to use the Loupe Browser. 4.2 Manual alignment of images One of the crucial first steps for processing Visium data is to align the gene expression spots to a high resolution image of the tissue, which in some cases can be at 40x magnification. While Space Ranger can do this automatically, if you want to ensure a high quality alignment with no mistakes it is best to do this manually in the Loupe browser. First, you upload the image and enter the serial number for the slide. Figure 4.1: Input your Visium Slide Serial Number and select your input image to start the alignment process using Loupe by 10x Genomics. Then, you align the fiducial frame such that the red circles are visibly aligned with the fiducial frame pattern of spots. Figure 4.2: Visual alignment of the Visium fiducial frame to the bright field histology image using Loupe by 10x Genomics. Then, you manually select the spots that contain tissue by drawing a contour line. This information will later on be used by SpatialExperiment to determine which spots overlap tissue and which do not. Figure 4.3: Manual selection of the Visium spots that overlap tissue based on the selected alignemnt between the image and the Visium slide fiducial frame. 4.3 Output files and Space Ranger The output files from Space Ranger are detailed in the Space Ranger (Visium) chapter of this book. The .cloupe file is the one you need to import into the Loupe Browser in order to explore your processed data. These files are generally between 1 and 2 GB each. 4.4 Downstream analyses in Loupe Browser After running Space Ranger (Visium), you can open the .cloupe file with Loupe and visually inspect the dimensionality reduction of the data through either a t-SNE or UMAP as well as apply graph-based or k-means clustering. Figure 4.4: Gene expression analysis results from spaceranger count visualized with Loupe. Most importantly you can overlay the gene expression data or annotated clusters onto the histology image. We will later learn how to do this using R and Bioconductor packages. Figure 4.5: Visual inspection of the graph-based clustering results from spaceranger count visualized with the tissue histology image in the background using Loupe. Loupe has many features, including the ability to make genes lists and plot marker genes spatially. Figure 4.6: Visualization with Loupe of four marker genes in the dorsolaterl prefrontal cortex (DLPFC): SNAP25 for neurons, MBP for glia, RELN for DLPFC layer 1 of the greay matter (neurons), and PCP4 for DLPFC layer 5. Only PCP4 is shown since it is the selected gene in our gene list. You can also make violin plots to explore gene expression differences across spots grouped by some discrete variable, such as cluster membership. Figure 4.7: PCP4 violin plots made with Loupe showing the log2 gene expression counts on the Y-axis. Furthermore with Loupe you can look at differential expression statistic results for each gene across clusters. Figure 4.8: Differential gene expression statistics displayed by Loupe. 4.5 Wrapping up Loupe can be particularly useful for annotating spots based on the clustering, dimension reduction, and known marker gene expression results from spaceranger count. That is, Loupe is a much more powerful interactive software than the web_summary.html file we will see in the Space Ranger (Visium) chapter. While all these downstream analyses Loupe enables are the ones we are interested in doing, you might want to have more control in the choice of algorithms and parameters. Furthermore, you might want to analyze the data from multiple Visium capture tissue sections together, depending on the design of your Visium experiment. We will learn how to do so using R and Bioconductor in the majority of the remaining chapters of this book. "],["space-ranger-visium.html", "Chapter 5 Space Ranger (Visium) 5.1 Overview 5.2 What is Space Ranger? 5.3 Installing Space Ranger 5.4 Run spaceranger count 5.5 Output files 5.6 Web summary .html file 5.7 Import outputs into R 5.8 VistoSeg for quantifying cells per spot 5.9 Wrapping up", " Chapter 5 Space Ranger (Visium) 5.1 Overview In this chapter, you will learn the basics about the spaceranger count processing pipeline by 10x Genomics for Visium data, and the VistoSeg software you can use for segmenting the images to estimate the number of the cells per spot. 5.2 What is Space Ranger? Space Ranger is a set of analysis pipelines for processing 10x Genomics Visium sequence data (FASTQ files) with high resolution microscope images of tissue. In short, it maps the transcriptomic reads to the microscope image of the tissue from which the reads were obtained. Space Ranger includes 5 pipelines but we only use one for our work with Visium – this is the spaceranger count pipeline. You can find more information about the various pipelines on the 10x Genomics website. 5.3 Installing Space Ranger Installing Space Ranger is fairly simple and can be completed in around 3 steps which can be found in their documentation. Briefly, these are: Download and unpack the Space Ranger .tar.gz file in any location Download and unpack any of the reference data .tar.gz file in a convenient location Pre-pend the Space Ranger directory to your $PATH If you use the lmod software management utility in your high performance computing environment, you can create a module with commands such as the ones described at: JHPCE module source for spaceranger version 1.3.0 JHPCE module config for spaceranger version 1.3.0 Thus in the future, you can use spaceranger with commands such as $ module load spaceranger/1.3.0 Loading LIBD module for spaceranger/1.3.0 Reference files, for use with the &#39;--transcriptome&#39; argument, can be accessed or downloaded into /dcl01/ajaffe/data/lab/singleCell/cellranger_reference/. $ spaceranger --help spaceranger spaceranger-1.3.0 Process 10x Genomics Spatial Gene Expression data USAGE: spaceranger &lt;SUBCOMMAND&gt; FLAGS: -h, --help Prints help information -V, --version Prints version information SUBCOMMANDS: count Count gene expression and feature barcoding reads from a single capture area aggr Aggregate data from multiple &#39;spaceranger count&#39; runs targeted-compare Analyze targeted enrichment performance by comparing a targeted sample to its cognate parent WTA sample (used as input for targeted gene expression) targeted-depth Estimate targeted read depth values (mean reads per spot) for a specified input parent WTA sample and a target panel CSV file mkfastq Run Illumina demultiplexer on sample sheets that contain 10x-specific sample index sets testrun Execute the &#39;count&#39; pipeline on a small test dataset mat2csv Convert a gene count matrix to CSV format mkref Prepare a reference for use with 10x analysis software. Requires a GTF and FASTA mkgtf Filter a GTF file by attribute prior to creating a 10x reference upload Upload analysis logs to 10x Genomics support sitecheck Collect linux system configuration information help Prints this message or the help of the given subcommand(s) 5.4 Run spaceranger count The spaceranger count pipeline requires several inputs (the microscope image and FASTQ files) and performs sequence alignment, tissue detection and alignment using the fiducial frame, and barcode/UMI counting. The most important output is the gene-spot matrix which we combine with other data generated by VistoSeg (see below) into a SpatialExperiment R object for downstream analysis. A more detailed description of this pipeline can be found here. Here is an example of the parameters used to run spaceranger count. Note how we are using the gene annotation information provided by 10x Genomics, which is actually the same data they provide for their single cell data processing software called Cell Ranger. So if you have both types of data, you can save some disk space by re-using these gene annotation files. One important input file is the --loupe-alignment file, which is why you’ll need to use Loupe Browser (Visium) first. Figure 5.1: spaceranger count example usage. Source: 10x Genomics. 5.5 Output files The spaceranger count pipeline outputs the following files. The ones we use for downstream analysis are the files contained in the raw_features_bc_matrix folder and can be imported into R using the SpatialExperiment::read10xVisium() function. Figure 5.2: spaceranger count output files. See the 10x Genomics spaceranger count documentation for detailed descriptions of each of these files. Among the output files, we have the two image files: tissue_lowres_image.png: max 600 pixels tissue_hires_image.png: max 2000 pixels though you might have a much higher quality image than the hires one that is proportional to these two. The scalefactors_json.json file includes the scaling factors to convert spot coordinates to pixel coordinates from either the lowres or highres image. The spot coordinates information is stored in the tissue_positions_list.csv text file. In addition, you might be interested in the metrics_summary.csv file 1 which includes the metrics displayed in the interactive website web_summary.html. While it is nice that spaceranger count provides files in the filtered_feature_bc_matrix directory with the data filtered to the spots overlapping tissue, as determined by your Loupe Browser (Visium) alignment file, we recommend using the raw_feature_bc_matrix data. Doing so will enable you to inspect the data in spots that theoretically don’t overlap your tissue. Then later on, you can easily filter out those spots when using SpatialExperiment. If you are interested in accessing some spaceranger count output files, 10x Genomics provides several public datasets that you can use. You can also access the spatialLIBD data from this collection of links Kristen R. Maynard et al. (2021). 5.6 Web summary .html file The web summary web_summary.html is the first file we look at after Space Ranger is done running because it tells us if the run was successful. It provides general quality control statistics and visualizations. These include clustering results using k-means and graph-based clustering methods visualized on reduced dimensions such as t-SNE and UMAP. One metric that you might want to check is the number of reads per spot overlapping tissue, since according to 10x Genomics, you should target 50,000 mean reads per spot. If you are too low, the median number of genes per spot will suffer and you might need to consider sequencing your cDNA library a bit more. Figure 5.3: Basic summary portion of the web_summary.html file. The .cloupe file is also useful for checking the quality of the data. There is more information on this file in the Loupe Browser (Visium) chapter of this book. 5.7 Import outputs into R We use the SpatialExperiment package to store the data from Space Ranger and VistoSeg (see below) in one convenient object (spe). Below is an example of the code we use to build the spe object. Figure 5.4: Example SpatialExperiment::read10xVisium() function call. This example will load the data from multiple Visium tissue sections since sample_info$sample_path and sample_info$sample_id are vectors of length greater than one. This can be quite useful for downstream analyses where you want to perform quality control, dimension reduction, clustering, etc across all Visium tissue sections instead of one tissue section at a time. 5.8 VistoSeg for quantifying cells per spot As was explained earlier in What is VistoSeg?, VistoSeg is a MATLAB pipeline that can be used to estimate the number of cells per spot, which can used for downstream analyses Tippani et al. (2021). It is ideal to first segment the bright field images as described in the Image segmentation (Visium) chapter. VistoSeg can also be used prior to running Loupe as it can help create high resolution images for each Visium tissue section. In particular, VistoSeg provides a graphical user interface (GUI) that can be be used for counting the number of cells or nuclei in the Visium spots of a given tissue capture area. This is described in detail in the VistoSeg documentation website chapter 4. Figure 5.5: A screenshot of the spotspotcheck GUI from VistoSeg that can be used for counting the number of cells or nuclei per Visium spot. Source: VistoSeg. The spotspotcheck GUI, will allow the user to visually inspect the nuclei segmentations along with generating nuclei counts per Visium spot for each capture area. The countNuclei MATLAB function is the command line version for spotspotcheck which only extracts the number of cells/nuclei per Visium spot without any visualization. The output is saved in a spreadsheet file (tissue_spot_counts.csv) that contains one row per Visium spot barcode and a column with the estimated number of cells per spot. The data for nuclei counts for the tissue per Visium spot can then be incorporated with the outputs of Space Ranger by being stored in the SpatialExperiment object or used for downstream analysis such as in Kristen R. Maynard et al. (2021). For more information about VistoSeg please see its documentation website. 5.9 Wrapping up By now you are familiar with how to use Loupe to align your images with the Visium fiducial frame, how to run spaceranger count to process the gene expression data, and how VistoSeg can help you with creating the images for Loupe as well as estimating the number of spots per cell. The next chapters will walk you through several of the analysis steps you can do with R and Bioconductor. References "],["related-resources.html", "Chapter 6 Related resources 6.1 Resources for other spatially-resolved platforms 6.2 Data structures 6.3 Statistical concepts", " Chapter 6 Related resources In this chapter, we highlight several related resources from the Bioconductor and other communities. 6.1 Resources for other spatially-resolved platforms Workflows and other resources for other spatially-resolved platforms: Analysis workflow for IMC data Online book providing a workflow highlighting the use of common R/Bioconductor packages to analyze single-cell data obtained from segmented imaging mass cytometry (IMC) images. Examples focus on IMC data and can also be applied to images obtained by other highly-multiplexed imaging technologies, e.g. CODEX, MIBI, and mIF. Authors: Nils Eling, Vito Zanotelli, Michelle Daniel, Daniel Schulz, Jonas Windhager VectraPolarisData Bioconductor data package providing two multiplex single-cell imaging datasets collected on Vectra Polaris and Vectra 3 instruments. Authors: Julia Wrobel, Tusharkanti Ghosh 6.2 Data structures SpatialExperiment S4 class for storing spatially-resolved transcriptomics (SRT) data, which is used as the basis for the examples in this book. See Chapter [Bioconductor data classes]. Authors: Dario Righelli, Lukas M. Weber, Helena L. Crowell, Brenda Pardo, Leonardo Collado-Torres, Shila Ghazanfar, Aaron T. L. Lun, Stephanie C. Hicks, Davide Risso SpatialFeatureExperiment S4 class extending SpatialExperiment to incorporate geometries and geometry operations with the sf R package. Authors: Lambda Moses, Lior Pachter 6.3 Statistical concepts Modern Statistics for Modern Biology Online textbook on concepts in modern statistics for high-throughput and high-dimensional biology, including chapter on image data and spatial statistics. Authors: Susan Holmes, Wolfgang Huber "],["contributors-and-acknowledgments.html", "Chapter 7 Contributors and acknowledgments 7.1 OSTA 7.2 SpatialExperiment 7.3 GitHub Actions workflow", " Chapter 7 Contributors and acknowledgments 7.1 OSTA Lukas M. Weber, Johns Hopkins Bloomberg School of Public Health, Baltimore, MD, USA Abby Spangler, Lieber Institute for Brain Development, Baltimore, MD, USA Madhavi Tippani, Lieber Institute for Brain Development, Baltimore, MD, USA Leonardo Collado-Torres, Lieber Institute for Brain Development, Baltimore, MD, USA Stephanie C. Hicks, Johns Hopkins Bloomberg School of Public Health, Baltimore, MD, USA As well as GitHub contributors who have helped us improve this book over time. Thank you for your contributions! 7.2 SpatialExperiment Dario Righelli, Department of Statistical Sciences, University of Padova, Padova, Italy Helena L. Crowell, Department of Molecular Life Sciences, University of Zurich, Zurich, Switzerland Aaron Lun, Genentech, South San Francisco, CA, USA Stephanie C. Hicks, Johns Hopkins Bloomberg School of Public Health, Baltimore, MD, USA Davide Risso, Department of Statistical Sciences, University of Padova, Padova, Italy 7.3 GitHub Actions workflow The GitHub Actions workflow used to build the online version of the book is based on biocthis and uses the Bioconductor Docker images. "],["references.html", "Chapter 8 References", " Chapter 8 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
